name: Build Android Client

on:
  push:
    branches:
      - main
      - release/*
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install Android SDK and NDK
        run: |
          set -euo pipefail
          export ANDROID_SDK_ROOT="/usr/local/lib/android/sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT"
          curl -fsSL -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip
          rm -rf cmdline-tools/latest || true
          unzip -o -q cmdline-tools.zip -d cmdline-tools
          mv -f cmdline-tools/cmdline-tools "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          rm -f cmdline-tools.zip
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses > /dev/null || true
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-34" \
            "platforms;android-35" \
            "build-tools;35.0.0" \
            "ndk;26.1.10909125" || true
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/26.1.10909125" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/26.1.10909125" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/26.1.10909125" >> $GITHUB_ENV

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Android targets
        run: |
          rustup target add aarch64-linux-android armv7-linux-androideabi

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Prepare truth-core
        run: |
          if [ ! -d truth-core ]; then
            git clone --depth 1 https://github.com/ekwator/truth-training truth-core
          fi

      - name: Build libtruth_core.so for both architectures
        run: |
          set -euo pipefail
          cd truth-core
          export ANDROID_NDK_HOME="${ANDROID_NDK_HOME:-$ANDROID_SDK_ROOT/ndk/26.1.10909125}"
          export ANDROID_NDK_ROOT="$ANDROID_NDK_HOME"
          export NDK_HOME="$ANDROID_NDK_HOME"
          export PATH="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          export API_LEVEL=34

          export CC_aarch64_linux_android="aarch64-linux-android$API_LEVEL-clang"
          export CC_armv7_linux_androideabi="armv7a-linux-androideabi$API_LEVEL-clang"
          export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="$CC_aarch64_linux_android"
          export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER="$CC_armv7_linux_androideabi"

          ./scripts/build-android.sh

          cargo build --release --target aarch64-linux-android
          cargo build --release --target armv7-linux-androideabi

          mkdir -p ../app/src/main/jniLibs/arm64-v8a ../app/src/main/jniLibs/armeabi-v7a

          SO64="target/aarch64-linux-android/release/libtruth_core.so"
          DEST64="../app/src/main/jniLibs/arm64-v8a/libtruth_core.so"
          SO32="target/armv7-linux-androideabi/release/libtruth_core.so"
          DEST32="../app/src/main/jniLibs/armeabi-v7a/libtruth_core.so"

          if [ -f "$SO64" ]; then
            cp -f "$SO64" "$DEST64"
            echo "Copied libtruth_core.so for arm64-v8a -> $DEST64"
          else
            echo "ERROR: Missing shared library for arm64-v8a: $SO64"
            exit 1
          fi

          if [ -f "$SO32" ]; then
            cp -f "$SO32" "$DEST32"
            echo "Copied libtruth_core.so for armeabi-v7a -> $DEST32"
          else
            echo "ERROR: Missing shared library for armeabi-v7a: $SO32"
            exit 1
          fi

      - name: Build Debug APK
        run: |
          cd app
          mkdir -p ~/.android
          keytool -genkeypair -v -keystore ~/.android/debug.keystore -storepass android -keypass android \
            -keyalg RSA -keysize 2048 -validity 10000 -alias androiddebugkey \
            -dname "CN=Truth, OU=AI, O=TruthTraining, L=Earth, S=World, C=US"
          cd ..
          ./gradlew assembleDebug

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: truth-android-build
          path: |
            app/build/outputs/apk/debug/app-debug.apk
            app/src/main/jniLibs/arm64-v8a/libtruth_core.so
            app/src/main/jniLibs/armeabi-v7a/libtruth_core.so

      - name: ✅ Done
        run: echo "Android client and native libraries built successfully for both architectures!"

            app/build/outputs/apk/debug/app-debug.apk
            app/src/main/jniLibs/**/*.so

      - name: ✅ Done
        run: echo "Android client and native library built, signed, and uploaded successfully!"
